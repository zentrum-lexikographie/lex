#!/usr/bin/env python

import datetime

import click

import clean
import clj
import deploy
import oxygen
import version


def check_java_version():
    java_version = clj.java_version()
    if java_version != '1.8':
        raise click.ClickException(
            'Java v1.8 is required for building the Oxygen Plugin '
            '("%s" detected)' % (java_version, )
        )


def banner(msg):
    click.secho(' '.join((str(datetime.datetime.now()), '[', msg, ']')), bold=True)


@click.group(chain=True)
def cli():
    pass


@cli.command('init')
def cli_init():
    'Init build'
    banner('Init')
    check_java_version()
    clean.all_classes()
    version.write_version_edn()


@cli.command('clean')
def cli_clean():
    'Clean compiler output'
    banner('Clean')
    clean.all_classes()


@cli.command('schema')
def cli_schema():
    'RNC --> RNG/Schematron'
    banner('Schema')
    clj.run_module('common', ['schema'])


def build_modules(modules=['client', 'server', 'validator']):
    for module in modules:
        banner('"%s" module' % (module,))
        clj.run_module(module, ['dev', 'prod', 'compile'])
        clj.run_module(module, ['dev', 'prod', 'package'])


@cli.command('build')
@click.pass_context
def cli_build(ctx):
    'Compile and package modules'
    ctx.invoke(cli_init)
    ctx.invoke(cli_schema)
    build_modules()
    ctx.invoke(cli_clean)


@cli.command('version')
def cli_version():
    'Print current version'
    click.secho(version.current_version())


@cli.command('release')
def cli_release():
    'Tag and push next version'
    click.secho(version.set_next_version())


@cli.command('deploy')
def cli_deploy():
    'Build Docker images'
    banner('Deploy')
    deploy.build_docker()


@cli.command('client')
@click.pass_context
def cli_client(ctx):
    'Runs the ZDL-Lex client (in Oxygen XML Editor)'
    ctx.invoke(cli_init)
    ctx.invoke(cli_schema)
    build_modules(['client'])
    oxygen.run()


@cli.command('server')
@click.pass_context
def cli_server(ctx):
    'Runs the ZDL-Lex server'
    ctx.invoke(cli_init)
    clj.run_module('server', ['prod', 'server'])


if __name__ == '__main__':
    cli()
